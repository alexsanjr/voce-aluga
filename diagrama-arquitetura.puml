@startuml "Arquitetura do Sistema - Voc√™ Aluga"

!theme plain
title <size:18><color:#1976D2>Sistema Voc√™ Aluga - Arquitetura Geral</color></size>

skinparam componentStyle rectangle
skinparam packageStyle rectangle

package "üåê Camada de Apresenta√ß√£o" as presentation #lightblue {
    component [React Frontend] as frontend #aliceblue
    component [Vite Dev Server] as vite #aliceblue
    component [TypeScript] as typescript #aliceblue
}

package "üîó Camada de Comunica√ß√£o" as communication #lightgray {
    component [REST API] as rest_api #white
    component [HTTP/HTTPS] as http #white
    component [JSON] as json #white
    component [CORS] as cors #white
}

package "üõ°Ô∏è Camada de Seguran√ßa" as security #lightyellow {
    component [Spring Security] as spring_security #white
    component [JWT Authentication] as jwt_auth #white
    component [Password Encoder] as password_encoder #white
    component [Authorization] as authorization #white
}

package "‚öôÔ∏è Camada de Aplica√ß√£o" as application #lightgreen {
    component [Spring Boot] as spring_boot #white
    component [Controllers] as controllers #white
    component [Services] as services #white
    component [DTOs] as dtos #white
}

package "üíº Camada de Neg√≥cio" as business #lightcoral {
    component [Entities] as entities #white
    component [Enums] as enums #white
    component [Business Logic] as business_logic #white
    component [Validation] as validation #white
}

package "üóÑÔ∏è Camada de Persist√™ncia" as persistence #lightcyan {
    component [Spring Data JPA] as spring_jpa #white
    component [Hibernate] as hibernate #white
    component [Repositories] as repositories #white
    component [JPA Entities] as jpa_entities #white
}

package "üóÉÔ∏è Camada de Dados" as data #lightsalmon {
    database "PostgreSQL\nDatabase" as postgres {
        folder "Tabelas" {
            [usuario] as usuario_table
            [cliente] as cliente_table
            [funcionario] as funcionario_table
            [veiculo] as veiculo_table
            [reserva] as reserva_table
            [filial] as filial_table
            [estoque] as estoque_table
        }
    }
}

package "üåç Servi√ßos Externos" as external #lightpink {
    component [Payment Gateway] as payment_gw #white
    component [Email Service] as email_service #white
    component [File Storage] as file_storage #white
}

' === Relacionamentos ===

' Frontend
frontend ..> rest_api : HTTP Requests
vite ..> frontend : Builds & Serves
typescript ..> frontend : Type Safety

' Communication
rest_api ..> spring_security : Protected by
http ..> json : Transfers
cors ..> frontend : Allows

' Security
spring_security ..> jwt_auth : Uses
jwt_auth ..> authorization : Enforces
password_encoder ..> spring_security : Secures

' Application
controllers ..> spring_security : Protected by
controllers ..> services : Delegates to
services ..> dtos : Uses
dtos ..> json : Serialized to

' Business
services ..> business_logic : Implements
business_logic ..> entities : Operates on
entities ..> enums : Contains
validation ..> entities : Validates

' Persistence
services ..> repositories : Uses
repositories ..> spring_jpa : Implements
spring_jpa ..> hibernate : Uses
hibernate ..> jpa_entities : Maps

' Data
jpa_entities ..> postgres : Persists to
postgres ..> usuario_table : Contains
postgres ..> cliente_table : Contains
postgres ..> funcionario_table : Contains
postgres ..> veiculo_table : Contains
postgres ..> reserva_table : Contains
postgres ..> filial_table : Contains
postgres ..> estoque_table : Contains

' External
services ..> payment_gw : Integrates with
services ..> email_service : Uses
services ..> file_storage : Stores files in

' === Anota√ß√µes ===

note top of presentation
  <b>Frontend Technologies:</b>
  ‚Ä¢ React 19.1.0 com TypeScript
  ‚Ä¢ Vite para desenvolvimento
  ‚Ä¢ React Router para navega√ß√£o
  ‚Ä¢ Axios para requisi√ß√µes HTTP
  ‚Ä¢ SCSS para estiliza√ß√£o
end note

note top of application
  <b>Backend Technologies:</b>
  ‚Ä¢ Spring Boot 3.x
  ‚Ä¢ Spring Web MVC
  ‚Ä¢ RESTful API design
  ‚Ä¢ Arquitetura em camadas
  ‚Ä¢ Inje√ß√£o de depend√™ncia
end note

note top of security
  <b>Seguran√ßa:</b>
  ‚Ä¢ JWT para autentica√ß√£o
  ‚Ä¢ Spring Security
  ‚Ä¢ Role-based authorization
  ‚Ä¢ CORS configurado
  ‚Ä¢ Senhas criptografadas
end note

note top of persistence
  <b>Persist√™ncia:</b>
  ‚Ä¢ Spring Data JPA
  ‚Ä¢ Hibernate ORM
  ‚Ä¢ Repository Pattern
  ‚Ä¢ Query Methods
  ‚Ä¢ Transa√ß√µes declarativas
end note

note top of data
  <b>Banco de Dados:</b>
  ‚Ä¢ PostgreSQL
  ‚Ä¢ Estrat√©gia JOINED para heran√ßa
  ‚Ä¢ Foreign Keys
  ‚Ä¢ Constraints de integridade
  ‚Ä¢ √çndices para performance
end note

@enduml
